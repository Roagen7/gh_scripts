//WIP lisp interpreter in GreyScript, heavily inspired by the article https://norvig.com/lispy.html 

tokenize = function(str)
		tokens = str.replace("(", " ( ").replace(")", " ) ").split(" ")	
		newTokens = []
		for token in tokens
			if not token == "" then 
				newTokens.push(token)
			end if
	end for
		return newTokens
end function 

readFromTokens = function(tokens) 
	if tokens.len == 0 then
		exit("unexpected bEOF")
	end if
	token = tokens.pull
	
	if token == "(" then
		L = []
		while not tokens[0] == ")" 
			L.push(readFromTokens(tokens))
		end while
		tokens.pull
		return L 
	else
		if token == ")" then
			exit("unexpected )")
		end if
		return atom(token)
	end if
end function

atom = function(token)
	if token.val == 0 then
		return token
	else 
		return token.val
end function

parse = function(str)
	return readFromTokens(tokenize(str))
end function 

operate = function(type,args)
	if type == "+" then
		return args[0] + args[1]
	end if
	if type == "equals?" then
		return args[0] == args[1]
	end if
	if type == "-" then
		return args[0] - args[1]
	end if
	if type == ">" then
		return args[0] > args[1]
	end if
	if type == "<" then
		return args[0] <  args[1]
	end if
	if type == "*" then
		return args[0] * args[1]
	end if
	if type == "/" then
		return args[0] / args[1]
	end if

end function

env = {"0":0}

eval = function(x)
	if typeof(x) == "string" then 
		if env.hasIndex(x) then
			return env[x]
		else 
			return x
		end if
	end if
	if typeof(x) == "number" then
		return x
	end if
	if x[0] == "if" then
		test = x[1]
		conseq = x[2]
		alt = x[3]
		exp = 1
		if eval(test) then
			exp = conseq
		else 
			exp = alt
		end if
		return eval(exp)
	end if
	if x[0] == "write" then
		exp = x[1]
		print(eval(exp))
	end if
	if x[0] == "define" then
		symbol = x[1]
		exp = x[2]
		env[symbol] = eval(exp)
	else
		proc =  eval(x[0])
		args = []
		for arg in slice(x,1)
			args.push(eval(arg))
		end for
		return operate(proc,args)
	end if
end function

schstr = function(out)
	if typeof(out) == "list" then
		return ""
	else 
		return out
	end if
end function


repl = function()
	while 1
		val = eval(parse(user_input("glisp>")))
		if val == "exit" then exit("byye ")
		print(schstr(val))
	end while
end function


usage = "Usage: \n glisp  # opens repl \n glisp -r # opens repl \n glisp -f [filename] # runs lisp from file"

if params.len == 1 and params[0] == "-h" then exit(usage)

if params.len == 0 or (params.len == 1 and params[0] == "-r") then
	repl()	
end if

if params.len == 2 and params[0] == "-f" then
	comp = get_shell.host_computer
	ff = comp.File(current_path+"/"+params[1])
	ff = ff.get_content.split("\n")
	for line in ff
		line = line.trim
		
		if not line.len == 0 and not line[0] == ";" then
			val = eval(parse(line))
			schstr(val)
		end if
	end for
end if












