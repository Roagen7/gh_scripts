//WIP lisp interpreter in GreyScript, heavily inspired by the article https://norvig.com/lispy.html 


tokenize = function(str)
		tokens = str.replace("(", " ( ").replace(")", " ) ").split(" ")	
		newTokens = []
		for token in tokens
			if not token == "" then 
				newTokens.push(token)
			end if
	end for
		return newTokens
end function 

readFromTokens = function(tokens) 
	if tokens.len == 0 then
		exit("unexpected EOF")
	end if
	token = tokens.pull
	
	if token == "(" then
		L = []
		while not tokens[0] == ")" 
			L.push(readFromTokens(tokens))
		end while
		tokens.pull
		return L 
	else
		if token == ")" then
			exit("unexpected )")
		end if
		return atom(token)
	end if
end function

atom = function(token)
	if token.val == 0 then
		return token
	else 
		return token.val
end function

parse = function(str)
	return readFromTokens(tokenize(str))
end function 


var_env = {}
env = function(key, params)
	if key == "+" then
		return params[0] + params[1]
	end if
	if key == "-" then
		return params[0] - params[1]
	end if
	
	return var_env[key]
	
end function

eval = function(x)
	if typeof(x) == "string" then 
		return env(x,[])
	end if
	if typeof(x) == "number" then
		return x
	end if
	if x[0] == "if" then
		test = x[1]
		conseq = x[2]
		alt = x[3]
		return 1
	end if
	if x[0] == "define" then
		symbol = x[1]
		exp = x[2]
		var_env[symbol] = exp
	else 	
		return eval(x[0])		
	end if

end function
